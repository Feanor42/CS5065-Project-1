{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","date","Date","forecastData","handleChange","bind","assertThisInitialized","getForecast","_this2","yearString","getFullYear","toString","monthString","getMonth","length","dayString","getDate","fetch","method","then","res","json","response","setState","catch","error","console","newDate","renderLineChart","react_default","a","createElement","es6","width","height","data","margin","top","right","left","bottom","type","dataKey","stroke","value","offset","position","verticalAlign","angle","className","es","dateFormat","selected","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oOCoFzBC,sBA5Eb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAM,IAAIC,KACVC,aAAc,IAEhBV,EAAKW,aAAeX,EAAKW,aAAaC,KAAlBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACpBA,EAAKc,YAAcd,EAAKc,YAAYF,KAAjBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAPFA,mFAWjBG,KAAKW,YAAYX,KAAKI,MAAMC,0CAGlBA,GAAK,IAAAO,EAAAZ,KACXa,EAAaR,EAAKS,cAAcC,WAChCC,GAAeX,EAAKY,WAAa,GAAGF,WACrCC,EAAYE,OAAS,IACtBF,EAAc,IAAMA,GAEtB,IAAIG,EAAYd,EAAKe,UAAUL,WAC5BI,EAAUD,OAAS,IACpBC,EAAY,IAAMA,GAGpBE,MAAM,cADWR,EAAaG,EAAcG,GACX,CACzBG,OAAQ,QACPC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAClBF,KAAK,SAAAG,GACJd,EAAKe,SAAS,CAACpB,aAAcmB,MAE9BE,MAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAM,SAAUA,0CAGnCE,GACG,MAAXA,IACD/B,KAAK2B,SAAS,CACZtB,KAAM0B,IAER/B,KAAKW,YAAYoB,qCAKnB,IAAMC,EACJC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,MAAO,IAAKC,OAAQ,IAAKC,KAAMvC,KAAKI,MAAMG,aACrDiC,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,KAC9CX,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMS,KAAK,WAAWC,QAAQ,OAAOC,OAAO,YAC5Cd,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMS,KAAK,WAAWC,QAAQ,OAAOC,OAAO,YAC5Cd,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAeW,OAAO,SACtBd,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOU,QAAQ,QACbb,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOY,MAAM,OAAOC,QAAS,GAAIC,SAAS,kBAE5CjB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQe,cAAc,MAAMb,OAAQ,KACpCL,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOY,MAAM,kBAAkBC,OAAQ,GAAIC,SAAS,mBAAmBE,OAAQ,MAEjFnB,EAAAC,EAAAC,cAACC,EAAA,EAAD,OAIJ,OACEH,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,OACbpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CACED,UAAU,aACVE,WAAW,WACXC,SAAUxD,KAAKI,MAAMC,KACrBoD,SAAUzD,KAAKQ,eAEhBwB,UAtES0B,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhD,KAAK,SAAAiD,GACjCA,EAAaC","file":"static/js/main.89c81825.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport DatePicker from \"react-datepicker\";\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Legend, Label, Tooltip } from 'recharts';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date(),\n      forecastData: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.getForecast = this.getForecast.bind(this);\n  }\n\n  componentDidMount(){\n    this.getForecast(this.state.date);\n  }\n\n  getForecast(date){\n    var yearString = date.getFullYear().toString();\n    var monthString = (date.getMonth() + 1).toString();\n    if(monthString.length < 2){\n      monthString = \"0\" + monthString;\n    }\n    var dayString = date.getDate().toString();\n    if(dayString.length < 2){\n      dayString = \"0\" + dayString;\n    }\n    var dateString = yearString + monthString + dayString;\n    fetch('/forecast/' + dateString, {\n            method: 'GET'\n          }).then(res => res.json())\n          .then(response => {\n            this.setState({forecastData: response});\n          })\n          .catch(error => console.error('Error:', error));\n  }\n\n  handleChange(newDate) {\n    if(newDate != null){\n      this.setState({\n        date: newDate\n      });\n      this.getForecast(newDate);\n    }\n  }\n\n  render() {\n    const renderLineChart = (\n      <LineChart width={600} height={300} data={this.state.forecastData}\n      margin={{ top: 15, right: 30, left: 20, bottom: 20 }}>\n        <Line type=\"monotone\" dataKey=\"TMAX\" stroke=\"#e81414\" />\n        <Line type=\"monotone\" dataKey=\"TMIN\" stroke=\"#1353e8\" />\n        <CartesianGrid stroke=\"#ccc\" />\n        <XAxis dataKey=\"DATE\">\n          <Label value=\"Date\" offset={-10} position=\"insideBottom\" />\n        </XAxis>\n        <Legend verticalAlign=\"top\" height={36}/>\n        <YAxis>\n          <Label value=\"Temperature (F)\" offset={10} position=\"insideBottomLeft\" angle={-90} />\n        </YAxis> \n        <Tooltip />\n      </LineChart>\n      );\n\n    return (\n      <div className=\"App\">\n        <DatePicker\n          className=\"DatePicker\"\n          dateFormat=\"yyyyMMdd\"\n          selected={this.state.date}\n          onChange={this.handleChange}\n        />\n        {renderLineChart}\n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}